{
	"id": "5a80b4b1b8725f50423262d0427520f5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Fallout.sol": {
				"content": "// 0x8f75b23c868aE23b7D6f909DBc39576e5287d30e\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract Fallout {\n  \n  using SafeMath for uint256;\n  mapping (address => uint) allocations;\n  address payable public owner;\n\n\n  /* constructor */\n  function Fal1out() public payable {\n    owner = payable(msg.sender);\n    allocations[owner] = msg.value;\n  }\n\n  modifier onlyOwner {\n\t        require(\n\t            msg.sender == owner,\n\t            \"caller is not the owner\"\n\t        );\n\t        _;\n\t    }\n\n  function allocate() public payable {\n    allocations[msg.sender] = allocations[msg.sender].add(msg.value);\n  }\n\n  function sendAllocation(address payable allocator) public {\n    require(allocations[allocator] > 0);\n    allocator.transfer(allocations[allocator]);\n  }\n\n  function collectAllocations() public onlyOwner {\n    payable(msg.sender).transfer(address(this).balance);\n  }\n\n  function allocatorBalance(address allocator) public view returns (uint) {\n    return allocations[allocator];\n  }\n}"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E DUP16 0xD0 0xAE PUSH10 0x79A6E3ADA69687701075 SWAP8 0x25 REVERT 0xBC DUP4 KECCAK256 DUP3 SWAP10 STOP 0xF7 PUSH10 0x47661CB990B664736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "482:6300:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E DUP16 0xD0 0xAE PUSH10 0x79A6E3ADA69687701075 SWAP8 0x25 REVERT 0xBC DUP4 KECCAK256 DUP3 SWAP10 STOP 0xF7 PUSH10 0x47661CB990B664736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "482:6300:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Fallout.sol": {
				"Fallout": {
					"abi": [
						{
							"inputs": [],
							"name": "Fal1out",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "allocatorBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectAllocations",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "sendAllocation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Fallout.sol\":163:1067  contract Fallout {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Fallout.sol\":163:1067  contract Fallout {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6fab5ddf\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x8aa96f38\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xa2dea26f\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xabaa9916\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xffd40b56\n      eq\n      tag_7\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Fallout.sol\":312:420  function Fal1out() public payable {... */\n    tag_2:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      stop\n        /* \"contracts/Fallout.sol\":840:949  function collectAllocations() public onlyOwner {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      pop\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      stop\n        /* \"contracts/Fallout.sol\":258:286  address payable public owner */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      pop\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Fallout.sol\":684:836  function sendAllocation(address payable allocator) public {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      pop\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      stop\n        /* \"contracts/Fallout.sol\":570:680  function allocate() public payable {... */\n    tag_6:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      stop\n        /* \"contracts/Fallout.sol\":953:1065  function allocatorBalance(address allocator) public view returns (uint) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Fallout.sol\":312:420  function Fal1out() public payable {... */\n    tag_9:\n        /* \"contracts/Fallout.sol\":368:378  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":352:357  owner */\n      0x01\n      0x00\n        /* \"contracts/Fallout.sol\":352:379  owner = payable(msg.sender) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Fallout.sol\":406:415  msg.value */\n      callvalue\n        /* \"contracts/Fallout.sol\":385:396  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":385:403  allocations[owner] */\n      dup1\n        /* \"contracts/Fallout.sol\":397:402  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":385:403  allocations[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Fallout.sol\":385:415  allocations[owner] = msg.value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Fallout.sol\":312:420  function Fal1out() public payable {... */\n      jump\t// out\n        /* \"contracts/Fallout.sol\":840:949  function collectAllocations() public onlyOwner {... */\n    tag_12:\n        /* \"contracts/Fallout.sol\":490:495  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":476:495  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":476:486  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":476:495  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Fallout.sol\":454:546  require(... */\n      tag_34\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_35\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_34:\n        /* \"contracts/Fallout.sol\":901:911  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":893:921  payable(msg.sender).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":893:944  payable(msg.sender).transfer(address(this).balance) */\n      0x08fc\n        /* \"contracts/Fallout.sol\":922:943  address(this).balance */\n      selfbalance\n        /* \"contracts/Fallout.sol\":893:944  payable(msg.sender).transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_39\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_39:\n      pop\n        /* \"contracts/Fallout.sol\":840:949  function collectAllocations() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Fallout.sol\":258:286  address payable public owner */\n    tag_15:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Fallout.sol\":684:836  function sendAllocation(address payable allocator) public {... */\n    tag_22:\n        /* \"contracts/Fallout.sol\":781:782  0 */\n      0x00\n        /* \"contracts/Fallout.sol\":756:767  allocations */\n      dup1\n        /* \"contracts/Fallout.sol\":756:778  allocations[allocator] */\n      0x00\n        /* \"contracts/Fallout.sol\":768:777  allocator */\n      dup4\n        /* \"contracts/Fallout.sol\":756:778  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":756:782  allocations[allocator] > 0 */\n      gt\n        /* \"contracts/Fallout.sol\":748:783  require(allocations[allocator] > 0) */\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n        /* \"contracts/Fallout.sol\":789:798  allocator */\n      dup1\n        /* \"contracts/Fallout.sol\":789:807  allocator.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":789:831  allocator.transfer(allocations[allocator]) */\n      0x08fc\n        /* \"contracts/Fallout.sol\":808:819  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":808:830  allocations[allocator] */\n      dup1\n        /* \"contracts/Fallout.sol\":820:829  allocator */\n      dup5\n        /* \"contracts/Fallout.sol\":808:830  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":789:831  allocator.transfer(allocations[allocator]) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_43\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_43:\n      pop\n        /* \"contracts/Fallout.sol\":684:836  function sendAllocation(address payable allocator) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Fallout.sol\":570:680  function allocate() public payable {... */\n    tag_24:\n        /* \"contracts/Fallout.sol\":637:675  allocations[msg.sender].add(msg.value) */\n      tag_45\n        /* \"contracts/Fallout.sol\":665:674  msg.value */\n      callvalue\n        /* \"contracts/Fallout.sol\":637:648  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":637:660  allocations[msg.sender] */\n      dup1\n        /* \"contracts/Fallout.sol\":649:659  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":637:660  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":637:664  allocations[msg.sender].add */\n      tag_46\n      swap1\n        /* \"contracts/Fallout.sol\":637:675  allocations[msg.sender].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_45:\n        /* \"contracts/Fallout.sol\":611:622  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":611:634  allocations[msg.sender] */\n      dup1\n        /* \"contracts/Fallout.sol\":623:633  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":611:634  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Fallout.sol\":611:675  allocations[msg.sender] = allocations[msg.sender].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Fallout.sol\":570:680  function allocate() public payable {... */\n      jump\t// out\n        /* \"contracts/Fallout.sol\":953:1065  function allocatorBalance(address allocator) public view returns (uint) {... */\n    tag_29:\n        /* \"contracts/Fallout.sol\":1019:1023  uint */\n      0x00\n        /* \"contracts/Fallout.sol\":1038:1049  allocations */\n      dup1\n        /* \"contracts/Fallout.sol\":1038:1060  allocations[allocator] */\n      0x00\n        /* \"contracts/Fallout.sol\":1050:1059  allocator */\n      dup4\n        /* \"contracts/Fallout.sol\":1038:1060  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":1031:1060  return allocations[allocator] */\n      swap1\n      pop\n        /* \"contracts/Fallout.sol\":953:1065  function allocatorBalance(address allocator) public view returns (uint) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2813:2820  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2843:2844  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2840  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2832:2844  return a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_52:\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_54\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_55\n      jump\t// in\n    tag_54:\n        /* \"#utility.yul\":59:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:307   */\n    tag_56:\n      0x00\n        /* \"#utility.yul\":244:250   */\n      dup2\n        /* \"#utility.yul\":231:251   */\n      calldataload\n        /* \"#utility.yul\":222:251   */\n      swap1\n      pop\n        /* \"#utility.yul\":260:301   */\n      tag_58\n        /* \"#utility.yul\":295:300   */\n      dup2\n        /* \"#utility.yul\":260:301   */\n      tag_59\n      jump\t// in\n    tag_58:\n        /* \"#utility.yul\":212:307   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":313:575   */\n    tag_28:\n      0x00\n        /* \"#utility.yul\":421:423   */\n      0x20\n        /* \"#utility.yul\":409:418   */\n      dup3\n        /* \"#utility.yul\":400:407   */\n      dup5\n        /* \"#utility.yul\":396:419   */\n      sub\n        /* \"#utility.yul\":392:424   */\n      slt\n        /* \"#utility.yul\":389:391   */\n      iszero\n      tag_61\n      jumpi\n        /* \"#utility.yul\":437:438   */\n      0x00\n        /* \"#utility.yul\":434:435   */\n      dup1\n        /* \"#utility.yul\":427:439   */\n      revert\n        /* \"#utility.yul\":389:391   */\n    tag_61:\n        /* \"#utility.yul\":480:481   */\n      0x00\n        /* \"#utility.yul\":505:558   */\n      tag_62\n        /* \"#utility.yul\":550:557   */\n      dup5\n        /* \"#utility.yul\":541:547   */\n      dup3\n        /* \"#utility.yul\":530:539   */\n      dup6\n        /* \"#utility.yul\":526:548   */\n      add\n        /* \"#utility.yul\":505:558   */\n      tag_52\n      jump\t// in\n    tag_62:\n        /* \"#utility.yul\":495:558   */\n      swap2\n      pop\n        /* \"#utility.yul\":451:568   */\n      pop\n        /* \"#utility.yul\":379:575   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":581:859   */\n    tag_21:\n      0x00\n        /* \"#utility.yul\":697:699   */\n      0x20\n        /* \"#utility.yul\":685:694   */\n      dup3\n        /* \"#utility.yul\":676:683   */\n      dup5\n        /* \"#utility.yul\":672:695   */\n      sub\n        /* \"#utility.yul\":668:700   */\n      slt\n        /* \"#utility.yul\":665:667   */\n      iszero\n      tag_64\n      jumpi\n        /* \"#utility.yul\":713:714   */\n      0x00\n        /* \"#utility.yul\":710:711   */\n      dup1\n        /* \"#utility.yul\":703:715   */\n      revert\n        /* \"#utility.yul\":665:667   */\n    tag_64:\n        /* \"#utility.yul\":756:757   */\n      0x00\n        /* \"#utility.yul\":781:842   */\n      tag_65\n        /* \"#utility.yul\":834:841   */\n      dup5\n        /* \"#utility.yul\":825:831   */\n      dup3\n        /* \"#utility.yul\":814:823   */\n      dup6\n        /* \"#utility.yul\":810:832   */\n      add\n        /* \"#utility.yul\":781:842   */\n      tag_56\n      jump\t// in\n    tag_65:\n        /* \"#utility.yul\":771:842   */\n      swap2\n      pop\n        /* \"#utility.yul\":727:852   */\n      pop\n        /* \"#utility.yul\":655:859   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":865:1007   */\n    tag_66:\n        /* \"#utility.yul\":968:1000   */\n      tag_68\n        /* \"#utility.yul\":994:999   */\n      dup2\n        /* \"#utility.yul\":968:1000   */\n      tag_69\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":963:966   */\n      dup3\n        /* \"#utility.yul\":956:1001   */\n      mstore\n        /* \"#utility.yul\":946:1007   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1013:1334   */\n    tag_70:\n      0x00\n        /* \"#utility.yul\":1176:1243   */\n      tag_72\n        /* \"#utility.yul\":1240:1242   */\n      0x17\n        /* \"#utility.yul\":1235:1238   */\n      dup4\n        /* \"#utility.yul\":1176:1243   */\n      tag_73\n      jump\t// in\n    tag_72:\n        /* \"#utility.yul\":1169:1243   */\n      swap2\n      pop\n        /* \"#utility.yul\":1273:1298   */\n      0x63616c6c6572206973206e6f7420746865206f776e6572000000000000000000\n        /* \"#utility.yul\":1269:1270   */\n      0x00\n        /* \"#utility.yul\":1264:1267   */\n      dup4\n        /* \"#utility.yul\":1260:1271   */\n      add\n        /* \"#utility.yul\":1253:1299   */\n      mstore\n        /* \"#utility.yul\":1325:1327   */\n      0x20\n        /* \"#utility.yul\":1320:1323   */\n      dup3\n        /* \"#utility.yul\":1316:1328   */\n      add\n        /* \"#utility.yul\":1309:1328   */\n      swap1\n      pop\n        /* \"#utility.yul\":1159:1334   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1340:1458   */\n    tag_74:\n        /* \"#utility.yul\":1427:1451   */\n      tag_76\n        /* \"#utility.yul\":1445:1450   */\n      dup2\n        /* \"#utility.yul\":1427:1451   */\n      tag_77\n      jump\t// in\n    tag_76:\n        /* \"#utility.yul\":1422:1425   */\n      dup3\n        /* \"#utility.yul\":1415:1452   */\n      mstore\n        /* \"#utility.yul\":1405:1458   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1464:1718   */\n    tag_17:\n      0x00\n        /* \"#utility.yul\":1611:1613   */\n      0x20\n        /* \"#utility.yul\":1600:1609   */\n      dup3\n        /* \"#utility.yul\":1596:1614   */\n      add\n        /* \"#utility.yul\":1588:1614   */\n      swap1\n      pop\n        /* \"#utility.yul\":1624:1711   */\n      tag_79\n        /* \"#utility.yul\":1708:1709   */\n      0x00\n        /* \"#utility.yul\":1697:1706   */\n      dup4\n        /* \"#utility.yul\":1693:1710   */\n      add\n        /* \"#utility.yul\":1684:1690   */\n      dup5\n        /* \"#utility.yul\":1624:1711   */\n      tag_66\n      jump\t// in\n    tag_79:\n        /* \"#utility.yul\":1578:1718   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1724:2143   */\n    tag_36:\n      0x00\n        /* \"#utility.yul\":1928:1930   */\n      0x20\n        /* \"#utility.yul\":1917:1926   */\n      dup3\n        /* \"#utility.yul\":1913:1931   */\n      add\n        /* \"#utility.yul\":1905:1931   */\n      swap1\n      pop\n        /* \"#utility.yul\":1977:1986   */\n      dup2\n        /* \"#utility.yul\":1971:1975   */\n      dup2\n        /* \"#utility.yul\":1967:1987   */\n      sub\n        /* \"#utility.yul\":1963:1964   */\n      0x00\n        /* \"#utility.yul\":1952:1961   */\n      dup4\n        /* \"#utility.yul\":1948:1965   */\n      add\n        /* \"#utility.yul\":1941:1988   */\n      mstore\n        /* \"#utility.yul\":2005:2136   */\n      tag_81\n        /* \"#utility.yul\":2131:2135   */\n      dup2\n        /* \"#utility.yul\":2005:2136   */\n      tag_70\n      jump\t// in\n    tag_81:\n        /* \"#utility.yul\":1997:2136   */\n      swap1\n      pop\n        /* \"#utility.yul\":1895:2143   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2149:2371   */\n    tag_31:\n      0x00\n        /* \"#utility.yul\":2280:2282   */\n      0x20\n        /* \"#utility.yul\":2269:2278   */\n      dup3\n        /* \"#utility.yul\":2265:2283   */\n      add\n        /* \"#utility.yul\":2257:2283   */\n      swap1\n      pop\n        /* \"#utility.yul\":2293:2364   */\n      tag_83\n        /* \"#utility.yul\":2361:2362   */\n      0x00\n        /* \"#utility.yul\":2350:2359   */\n      dup4\n        /* \"#utility.yul\":2346:2363   */\n      add\n        /* \"#utility.yul\":2337:2343   */\n      dup5\n        /* \"#utility.yul\":2293:2364   */\n      tag_74\n      jump\t// in\n    tag_83:\n        /* \"#utility.yul\":2247:2371   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2377:2546   */\n    tag_73:\n      0x00\n        /* \"#utility.yul\":2495:2501   */\n      dup3\n        /* \"#utility.yul\":2490:2493   */\n      dup3\n        /* \"#utility.yul\":2483:2502   */\n      mstore\n        /* \"#utility.yul\":2535:2539   */\n      0x20\n        /* \"#utility.yul\":2530:2533   */\n      dup3\n        /* \"#utility.yul\":2526:2540   */\n      add\n        /* \"#utility.yul\":2511:2540   */\n      swap1\n      pop\n        /* \"#utility.yul\":2473:2546   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2552:2857   */\n    tag_50:\n      0x00\n        /* \"#utility.yul\":2611:2631   */\n      tag_86\n        /* \"#utility.yul\":2629:2630   */\n      dup3\n        /* \"#utility.yul\":2611:2631   */\n      tag_77\n      jump\t// in\n    tag_86:\n        /* \"#utility.yul\":2606:2631   */\n      swap2\n      pop\n        /* \"#utility.yul\":2645:2665   */\n      tag_87\n        /* \"#utility.yul\":2663:2664   */\n      dup4\n        /* \"#utility.yul\":2645:2665   */\n      tag_77\n      jump\t// in\n    tag_87:\n        /* \"#utility.yul\":2640:2665   */\n      swap3\n      pop\n        /* \"#utility.yul\":2799:2800   */\n      dup3\n        /* \"#utility.yul\":2731:2797   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2727:2801   */\n      sub\n        /* \"#utility.yul\":2724:2725   */\n      dup3\n        /* \"#utility.yul\":2721:2802   */\n      gt\n        /* \"#utility.yul\":2718:2720   */\n      iszero\n      tag_88\n      jumpi\n        /* \"#utility.yul\":2805:2823   */\n      tag_89\n      tag_90\n      jump\t// in\n    tag_89:\n        /* \"#utility.yul\":2718:2720   */\n    tag_88:\n        /* \"#utility.yul\":2849:2850   */\n      dup3\n        /* \"#utility.yul\":2846:2847   */\n      dup3\n        /* \"#utility.yul\":2842:2851   */\n      add\n        /* \"#utility.yul\":2835:2851   */\n      swap1\n      pop\n        /* \"#utility.yul\":2596:2857   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2863:2959   */\n    tag_91:\n      0x00\n        /* \"#utility.yul\":2929:2953   */\n      tag_93\n        /* \"#utility.yul\":2947:2952   */\n      dup3\n        /* \"#utility.yul\":2929:2953   */\n      tag_94\n      jump\t// in\n    tag_93:\n        /* \"#utility.yul\":2918:2953   */\n      swap1\n      pop\n        /* \"#utility.yul\":2908:2959   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2965:3069   */\n    tag_69:\n      0x00\n        /* \"#utility.yul\":3039:3063   */\n      tag_96\n        /* \"#utility.yul\":3057:3062   */\n      dup3\n        /* \"#utility.yul\":3039:3063   */\n      tag_94\n      jump\t// in\n    tag_96:\n        /* \"#utility.yul\":3028:3063   */\n      swap1\n      pop\n        /* \"#utility.yul\":3018:3069   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3075:3201   */\n    tag_94:\n      0x00\n        /* \"#utility.yul\":3152:3194   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3145:3150   */\n      dup3\n        /* \"#utility.yul\":3141:3195   */\n      and\n        /* \"#utility.yul\":3130:3195   */\n      swap1\n      pop\n        /* \"#utility.yul\":3120:3201   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3207:3284   */\n    tag_77:\n      0x00\n        /* \"#utility.yul\":3273:3278   */\n      dup2\n        /* \"#utility.yul\":3262:3278   */\n      swap1\n      pop\n        /* \"#utility.yul\":3252:3284   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3290:3470   */\n    tag_90:\n        /* \"#utility.yul\":3338:3415   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3335:3336   */\n      0x00\n        /* \"#utility.yul\":3328:3416   */\n      mstore\n        /* \"#utility.yul\":3435:3439   */\n      0x11\n        /* \"#utility.yul\":3432:3433   */\n      0x04\n        /* \"#utility.yul\":3425:3440   */\n      mstore\n        /* \"#utility.yul\":3459:3463   */\n      0x24\n        /* \"#utility.yul\":3456:3457   */\n      0x00\n        /* \"#utility.yul\":3449:3464   */\n      revert\n        /* \"#utility.yul\":3476:3598   */\n    tag_55:\n        /* \"#utility.yul\":3549:3573   */\n      tag_101\n        /* \"#utility.yul\":3567:3572   */\n      dup2\n        /* \"#utility.yul\":3549:3573   */\n      tag_91\n      jump\t// in\n    tag_101:\n        /* \"#utility.yul\":3542:3547   */\n      dup2\n        /* \"#utility.yul\":3539:3574   */\n      eq\n        /* \"#utility.yul\":3529:3531   */\n      tag_102\n      jumpi\n        /* \"#utility.yul\":3588:3589   */\n      0x00\n        /* \"#utility.yul\":3585:3586   */\n      dup1\n        /* \"#utility.yul\":3578:3590   */\n      revert\n        /* \"#utility.yul\":3529:3531   */\n    tag_102:\n        /* \"#utility.yul\":3519:3598   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3604:3742   */\n    tag_59:\n        /* \"#utility.yul\":3685:3717   */\n      tag_104\n        /* \"#utility.yul\":3711:3716   */\n      dup2\n        /* \"#utility.yul\":3685:3717   */\n      tag_69\n      jump\t// in\n    tag_104:\n        /* \"#utility.yul\":3678:3683   */\n      dup2\n        /* \"#utility.yul\":3675:3718   */\n      eq\n        /* \"#utility.yul\":3665:3667   */\n      tag_105\n      jumpi\n        /* \"#utility.yul\":3732:3733   */\n      0x00\n        /* \"#utility.yul\":3729:3730   */\n      dup1\n        /* \"#utility.yul\":3722:3734   */\n      revert\n        /* \"#utility.yul\":3665:3667   */\n    tag_105:\n        /* \"#utility.yul\":3655:3742   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122095da480db528b7163909b41f04b9642917613718622eb11d641d25eb9d38fd2164736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506106fb806100206000396000f3fe6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100a6578063abaa9916146100cf578063ffd40b56146100d9575b600080fd5b610062610116565b005b34801561007057600080fd5b506100796101be565b005b34801561008757600080fd5b50610090610297565b60405161009d919061055d565b60405180910390f35b3480156100b257600080fd5b506100cd60048036038101906100c891906104d6565b6102bd565b005b6100d7610390565b005b3480156100e557600080fd5b5061010060048036038101906100fb91906104ad565b610425565b60405161010d9190610598565b60405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024590610578565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610294573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161030857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561038c573d6000803e3d6000fd5b5050565b6103e1346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461046d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000818361047b91906105c4565b905092915050565b60008135905061049281610697565b92915050565b6000813590506104a7816106ae565b92915050565b6000602082840312156104bf57600080fd5b60006104cd84828501610483565b91505092915050565b6000602082840312156104e857600080fd5b60006104f684828501610498565b91505092915050565b6105088161062c565b82525050565b600061051b6017836105b3565b91507f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006000830152602082019050919050565b6105578161065e565b82525050565b600060208201905061057260008301846104ff565b92915050565b600060208201905081810360008301526105918161050e565b9050919050565b60006020820190506105ad600083018461054e565b92915050565b600082825260208201905092915050565b60006105cf8261065e565b91506105da8361065e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561060f5761060e610668565b5b828201905092915050565b60006106258261063e565b9050919050565b60006106378261063e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6106a08161061a565b81146106ab57600080fd5b50565b6106b78161062c565b81146106c257600080fd5b5056fea264697066735822122095da480db528b7163909b41f04b9642917613718622eb11d641d25eb9d38fd2164736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6FB DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0xD9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x116 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x1BE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9D SWAP2 SWAP1 PUSH2 0x55D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x4D6 JUMP JUMPDEST PUSH2 0x2BD JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD7 PUSH2 0x390 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x4AD JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x598 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x245 SWAP1 PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x38C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3E1 CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x46D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x47B SWAP2 SWAP1 PUSH2 0x5C4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x492 DUP2 PUSH2 0x697 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4A7 DUP2 PUSH2 0x6AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4CD DUP5 DUP3 DUP6 ADD PUSH2 0x483 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP5 DUP3 DUP6 ADD PUSH2 0x498 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x508 DUP2 PUSH2 0x62C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51B PUSH1 0x17 DUP4 PUSH2 0x5B3 JUMP JUMPDEST SWAP2 POP PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x557 DUP2 PUSH2 0x65E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x572 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4FF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x591 DUP2 PUSH2 0x50E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5AD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x54E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CF DUP3 PUSH2 0x65E JUMP JUMPDEST SWAP2 POP PUSH2 0x5DA DUP4 PUSH2 0x65E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x60F JUMPI PUSH2 0x60E PUSH2 0x668 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x625 DUP3 PUSH2 0x63E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 PUSH2 0x63E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x6A0 DUP2 PUSH2 0x61A JUMP JUMPDEST DUP2 EQ PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x6B7 DUP2 PUSH2 0x62C JUMP JUMPDEST DUP2 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xDA 0x48 0xD 0xB5 0x28 0xB7 AND CODECOPY MULMOD 0xB4 0x1F DIV 0xB9 PUSH5 0x2917613718 PUSH3 0x2EB11D PUSH5 0x1D25EB9D38 REVERT 0x21 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "163:904:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3745:2",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:2",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:2"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:2"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:2"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:2"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:2",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:2",
														"type": ""
													}
												],
												"src": "7:139:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "212:95:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "222:29:2",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "244:6:2"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "231:12:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:20:2"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "222:5:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "295:5:2"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address_payable",
																	"nodeType": "YulIdentifier",
																	"src": "260:34:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "260:41:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "260:41:2"
														}
													]
												},
												"name": "abi_decode_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "190:6:2",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "198:3:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "206:5:2",
														"type": ""
													}
												],
												"src": "152:155:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:196:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "425:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "434:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "437:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "427:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "427:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "427:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "400:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "409:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "396:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "396:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "421:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "392:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:32:2"
															},
															"nodeType": "YulIf",
															"src": "389:2:2"
														},
														{
															"nodeType": "YulBlock",
															"src": "451:117:2",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "466:15:2",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "480:1:2",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "470:6:2",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "495:63:2",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "530:9:2"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "541:6:2"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "526:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "526:22:2"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "550:7:2"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "505:20:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "505:53:2"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "495:6:2"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "349:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "360:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "372:6:2",
														"type": ""
													}
												],
												"src": "313:262:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "655:204:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "701:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "710:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "713:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "703:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "703:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "703:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "676:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "685:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "672:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "672:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "697:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "668:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "668:32:2"
															},
															"nodeType": "YulIf",
															"src": "665:2:2"
														},
														{
															"nodeType": "YulBlock",
															"src": "727:125:2",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "742:15:2",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "756:1:2",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "746:6:2",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "771:71:2",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "814:9:2"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "825:6:2"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "810:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "810:22:2"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "834:7:2"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_payable",
																			"nodeType": "YulIdentifier",
																			"src": "781:28:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "781:61:2"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "771:6:2"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "625:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "636:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "648:6:2",
														"type": ""
													}
												],
												"src": "581:278:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "946:61:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "963:3:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "994:5:2"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address_payable",
																			"nodeType": "YulIdentifier",
																			"src": "968:25:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "968:32:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "956:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "956:45:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "956:45:2"
														}
													]
												},
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "934:5:2",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "941:3:2",
														"type": ""
													}
												],
												"src": "865:142:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1159:175:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1169:74:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1235:3:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1240:2:2",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1176:58:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1176:67:2"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1169:3:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1264:3:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1269:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1260:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1260:11:2"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1273:25:2",
																		"type": "",
																		"value": "caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1253:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1253:46:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1253:46:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1309:19:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1320:3:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1325:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1316:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1316:12:2"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1309:3:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1147:3:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1155:3:2",
														"type": ""
													}
												],
												"src": "1013:321:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1405:53:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1422:3:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1445:5:2"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1427:17:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1427:24:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1415:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1415:37:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1415:37:2"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1393:5:2",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1400:3:2",
														"type": ""
													}
												],
												"src": "1340:118:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1578:140:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1588:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1600:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1611:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1596:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1596:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1588:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1684:6:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1697:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1708:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1693:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1693:17:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1624:59:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:87:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1624:87:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1550:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1562:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1573:4:2",
														"type": ""
													}
												],
												"src": "1464:254:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1895:248:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1905:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1917:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1928:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1913:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1913:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1905:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1952:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1963:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1948:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1948:17:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1971:4:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1977:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1967:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1967:20:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1941:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1941:47:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1941:47:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1997:139:2",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2131:4:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2005:124:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2005:131:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1997:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1875:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1890:4:2",
														"type": ""
													}
												],
												"src": "1724:419:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2247:124:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2257:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2269:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2280:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2265:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2265:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2257:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2337:6:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2350:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2361:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2346:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2346:17:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2293:43:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2293:71:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2293:71:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2219:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2231:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2242:4:2",
														"type": ""
													}
												],
												"src": "2149:222:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2473:73:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2490:3:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2495:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2483:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2483:19:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2483:19:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2511:29:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2530:3:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2535:4:2",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2526:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2526:14:2"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "2511:11:2"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2445:3:2",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2450:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "2461:11:2",
														"type": ""
													}
												],
												"src": "2377:169:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2596:261:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2606:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2629:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2611:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2611:20:2"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "2606:1:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2640:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2663:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2645:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2645:20:2"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "2640:1:2"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2803:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2805:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2805:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2805:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2724:1:2"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2731:66:2",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2799:1:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2727:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2727:74:2"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2721:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2721:81:2"
															},
															"nodeType": "YulIf",
															"src": "2718:2:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2835:16:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2846:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2849:1:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2842:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2842:9:2"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2835:3:2"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2583:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2586:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2592:3:2",
														"type": ""
													}
												],
												"src": "2552:305:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2908:51:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2918:35:2",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2947:5:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2929:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2929:24:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2918:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2890:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2900:7:2",
														"type": ""
													}
												],
												"src": "2863:96:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3018:51:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3028:35:2",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3057:5:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3039:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3039:24:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3028:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3000:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3010:7:2",
														"type": ""
													}
												],
												"src": "2965:104:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3120:81:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3130:65:2",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3145:5:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3152:42:2",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3141:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3141:54:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3130:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3102:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3112:7:2",
														"type": ""
													}
												],
												"src": "3075:126:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3252:32:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3262:16:2",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3273:5:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3262:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3234:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3244:7:2",
														"type": ""
													}
												],
												"src": "3207:77:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3318:152:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3335:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3338:77:2",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3328:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3328:88:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3328:88:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3432:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3435:4:2",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3425:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3425:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3425:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3456:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3459:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3449:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3449:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3449:15:2"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "3290:180:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3519:79:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3576:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3585:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3588:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3578:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3578:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3578:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3542:5:2"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3567:5:2"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "3549:17:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3549:24:2"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3539:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3539:35:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3532:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3532:43:2"
															},
															"nodeType": "YulIf",
															"src": "3529:2:2"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3512:5:2",
														"type": ""
													}
												],
												"src": "3476:122:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3655:87:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3720:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3729:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3732:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3722:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3722:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3722:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3678:5:2"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3711:5:2"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address_payable",
																					"nodeType": "YulIdentifier",
																					"src": "3685:25:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3685:32:2"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3675:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3675:43:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3668:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3668:51:2"
															},
															"nodeType": "YulIf",
															"src": "3665:2:2"
														}
													]
												},
												"name": "validator_revert_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3648:5:2",
														"type": ""
													}
												],
												"src": "3604:138:2"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_payable(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_payable(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n\n        mstore(add(pos, 0), \"caller is not the owner\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100a6578063abaa9916146100cf578063ffd40b56146100d9575b600080fd5b610062610116565b005b34801561007057600080fd5b506100796101be565b005b34801561008757600080fd5b50610090610297565b60405161009d919061055d565b60405180910390f35b3480156100b257600080fd5b506100cd60048036038101906100c891906104d6565b6102bd565b005b6100d7610390565b005b3480156100e557600080fd5b5061010060048036038101906100fb91906104ad565b610425565b60405161010d9190610598565b60405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024590610578565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610294573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161030857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561038c573d6000803e3d6000fd5b5050565b6103e1346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461046d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000818361047b91906105c4565b905092915050565b60008135905061049281610697565b92915050565b6000813590506104a7816106ae565b92915050565b6000602082840312156104bf57600080fd5b60006104cd84828501610483565b91505092915050565b6000602082840312156104e857600080fd5b60006104f684828501610498565b91505092915050565b6105088161062c565b82525050565b600061051b6017836105b3565b91507f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006000830152602082019050919050565b6105578161065e565b82525050565b600060208201905061057260008301846104ff565b92915050565b600060208201905081810360008301526105918161050e565b9050919050565b60006020820190506105ad600083018461054e565b92915050565b600082825260208201905092915050565b60006105cf8261065e565b91506105da8361065e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561060f5761060e610668565b5b828201905092915050565b60006106258261063e565b9050919050565b60006106378261063e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6106a08161061a565b81146106ab57600080fd5b50565b6106b78161062c565b81146106c257600080fd5b5056fea264697066735822122095da480db528b7163909b41f04b9642917613718622eb11d641d25eb9d38fd2164736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0xD9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x116 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x1BE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9D SWAP2 SWAP1 PUSH2 0x55D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x4D6 JUMP JUMPDEST PUSH2 0x2BD JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD7 PUSH2 0x390 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x4AD JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x598 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x245 SWAP1 PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x38C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3E1 CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x46D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x47B SWAP2 SWAP1 PUSH2 0x5C4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x492 DUP2 PUSH2 0x697 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4A7 DUP2 PUSH2 0x6AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4CD DUP5 DUP3 DUP6 ADD PUSH2 0x483 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP5 DUP3 DUP6 ADD PUSH2 0x498 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x508 DUP2 PUSH2 0x62C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51B PUSH1 0x17 DUP4 PUSH2 0x5B3 JUMP JUMPDEST SWAP2 POP PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x557 DUP2 PUSH2 0x65E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x572 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4FF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x591 DUP2 PUSH2 0x50E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5AD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x54E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CF DUP3 PUSH2 0x65E JUMP JUMPDEST SWAP2 POP PUSH2 0x5DA DUP4 PUSH2 0x65E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x60F JUMPI PUSH2 0x60E PUSH2 0x668 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x625 DUP3 PUSH2 0x63E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 PUSH2 0x63E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x6A0 DUP2 PUSH2 0x61A JUMP JUMPDEST DUP2 EQ PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x6B7 DUP2 PUSH2 0x62C JUMP JUMPDEST DUP2 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xDA 0x48 0xD 0xB5 0x28 0xB7 AND CODECOPY MULMOD 0xB4 0x1F DIV 0xB9 PUSH5 0x2917613718 PUSH3 0x2EB11D PUSH5 0x1D25EB9D38 REVERT 0x21 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "163:904:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;312:108;;;:::i;:::-;;840:109;;;;;;;;;;;;;:::i;:::-;;258:28;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;684:152;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;570:110;;;:::i;:::-;;953:112;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;312:108;368:10;352:5;;:27;;;;;;;;;;;;;;;;;;406:9;385:11;:18;397:5;;;;;;;;;;;385:18;;;;;;;;;;;;;;;:30;;;;312:108::o;840:109::-;490:5;;;;;;;;;;;476:19;;:10;:19;;;454:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;901:10:::1;893:28;;:51;922:21;893:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;840:109::o:0;258:28::-;;;;;;;;;;;;;:::o;684:152::-;781:1;756:11;:22;768:9;756:22;;;;;;;;;;;;;;;;:26;748:35;;;;;;789:9;:18;;:42;808:11;:22;820:9;808:22;;;;;;;;;;;;;;;;789:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:152;:::o;570:110::-;637:38;665:9;637:11;:23;649:10;637:23;;;;;;;;;;;;;;;;:27;;:38;;;;:::i;:::-;611:11;:23;623:10;611:23;;;;;;;;;;;;;;;:64;;;;570:110::o;953:112::-;1019:4;1038:11;:22;1050:9;1038:22;;;;;;;;;;;;;;;;1031:29;;953:112;;;:::o;2755:96:0:-;2813:7;2843:1;2839;:5;;;;:::i;:::-;2832:12;;2755:96;;;;:::o;7:139:2:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:155::-;;244:6;231:20;222:29;;260:41;295:5;260:41;:::i;:::-;212:95;;;;:::o;313:262::-;;421:2;409:9;400:7;396:23;392:32;389:2;;;437:1;434;427:12;389:2;480:1;505:53;550:7;541:6;530:9;526:22;505:53;:::i;:::-;495:63;;451:117;379:196;;;;:::o;581:278::-;;697:2;685:9;676:7;672:23;668:32;665:2;;;713:1;710;703:12;665:2;756:1;781:61;834:7;825:6;814:9;810:22;781:61;:::i;:::-;771:71;;727:125;655:204;;;;:::o;865:142::-;968:32;994:5;968:32;:::i;:::-;963:3;956:45;946:61;;:::o;1013:321::-;;1176:67;1240:2;1235:3;1176:67;:::i;:::-;1169:74;;1273:25;1269:1;1264:3;1260:11;1253:46;1325:2;1320:3;1316:12;1309:19;;1159:175;;;:::o;1340:118::-;1427:24;1445:5;1427:24;:::i;:::-;1422:3;1415:37;1405:53;;:::o;1464:254::-;;1611:2;1600:9;1596:18;1588:26;;1624:87;1708:1;1697:9;1693:17;1684:6;1624:87;:::i;:::-;1578:140;;;;:::o;1724:419::-;;1928:2;1917:9;1913:18;1905:26;;1977:9;1971:4;1967:20;1963:1;1952:9;1948:17;1941:47;2005:131;2131:4;2005:131;:::i;:::-;1997:139;;1895:248;;;:::o;2149:222::-;;2280:2;2269:9;2265:18;2257:26;;2293:71;2361:1;2350:9;2346:17;2337:6;2293:71;:::i;:::-;2247:124;;;;:::o;2377:169::-;;2495:6;2490:3;2483:19;2535:4;2530:3;2526:14;2511:29;;2473:73;;;;:::o;2552:305::-;;2611:20;2629:1;2611:20;:::i;:::-;2606:25;;2645:20;2663:1;2645:20;:::i;:::-;2640:25;;2799:1;2731:66;2727:74;2724:1;2721:81;2718:2;;;2805:18;;:::i;:::-;2718:2;2849:1;2846;2842:9;2835:16;;2596:261;;;;:::o;2863:96::-;;2929:24;2947:5;2929:24;:::i;:::-;2918:35;;2908:51;;;:::o;2965:104::-;;3039:24;3057:5;3039:24;:::i;:::-;3028:35;;3018:51;;;:::o;3075:126::-;;3152:42;3145:5;3141:54;3130:65;;3120:81;;;:::o;3207:77::-;;3273:5;3262:16;;3252:32;;;:::o;3290:180::-;3338:77;3335:1;3328:88;3435:4;3432:1;3425:15;3459:4;3456:1;3449:15;3476:122;3549:24;3567:5;3549:24;:::i;:::-;3542:5;3539:35;3529:2;;3588:1;3585;3578:12;3529:2;3519:79;:::o;3604:138::-;3685:32;3711:5;3685:32;:::i;:::-;3678:5;3675:43;3665:2;;3732:1;3729;3722:12;3665:2;3655:87;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "357400",
								"executionCost": "393",
								"totalCost": "357793"
							},
							"external": {
								"Fal1out()": "41903",
								"allocate()": "infinite",
								"allocatorBalance(address)": "1629",
								"collectAllocations()": "infinite",
								"owner()": "1236",
								"sendAllocation(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 163,
									"end": 1067,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095da480db528b7163909b41f04b9642917613718622eb11d641d25eb9d38fd2164736f6c63430008000033",
									".code": [
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "6FAB5DDF"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "8AA96F38"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "8DA5CB5B"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "A2DEA26F"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "ABAA9916"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "FFD40B56"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 163,
											"end": 1067,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 312,
											"end": 420,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 312,
											"end": 420,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 312,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 312,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 312,
											"end": 420,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 312,
											"end": 420,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 312,
											"end": 420,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 312,
											"end": 420,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 570,
											"end": 680,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 570,
											"end": 680,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 570,
											"end": 680,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 312,
											"end": 420,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 312,
											"end": 420,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 368,
											"end": 378,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 352,
											"end": 357,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 352,
											"end": 357,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 352,
											"end": 379,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 352,
											"end": 379,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 406,
											"end": 415,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 385,
											"end": 396,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 385,
											"end": 403,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 397,
											"end": 402,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 402,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 397,
											"end": 402,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 397,
											"end": 402,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 397,
											"end": 402,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 385,
											"end": 403,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 385,
											"end": 403,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 385,
											"end": 403,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 385,
											"end": 403,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 385,
											"end": 403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 385,
											"end": 403,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 385,
											"end": 415,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 385,
											"end": 415,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 385,
											"end": 415,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 385,
											"end": 415,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 312,
											"end": 420,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 490,
											"end": 495,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 490,
											"end": 495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 490,
											"end": 495,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 490,
											"end": 495,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 490,
											"end": 495,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 476,
											"end": 495,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 495,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 476,
											"end": 486,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 476,
											"end": 495,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 495,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 476,
											"end": 495,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 454,
											"end": 546,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 454,
											"end": 546,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 901,
											"end": 911,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 893,
											"end": 921,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 893,
											"end": 921,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 922,
											"end": 943,
											"name": "SELFBALANCE",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 893,
											"end": 944,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 893,
											"end": 944,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 840,
											"end": 949,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 258,
											"end": 286,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 258,
											"end": 286,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 781,
											"end": 782,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 756,
											"end": 767,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 768,
											"end": 777,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 756,
											"end": 778,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 756,
											"end": 778,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 756,
											"end": 778,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 756,
											"end": 778,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 756,
											"end": 778,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 756,
											"end": 778,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 756,
											"end": 782,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 748,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 748,
											"end": 783,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 748,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 748,
											"end": 783,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 748,
											"end": 783,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 748,
											"end": 783,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 789,
											"end": 798,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 789,
											"end": 807,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 789,
											"end": 807,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 808,
											"end": 819,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 808,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 820,
											"end": 829,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 808,
											"end": 830,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 808,
											"end": 830,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 808,
											"end": 830,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 808,
											"end": 830,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 808,
											"end": 830,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 808,
											"end": 830,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 789,
											"end": 831,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 789,
											"end": 831,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 684,
											"end": 836,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "tag",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 570,
											"end": 680,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 637,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 665,
											"end": 674,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 637,
											"end": 648,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 637,
											"end": 660,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 649,
											"end": 659,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 637,
											"end": 660,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 637,
											"end": 660,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 637,
											"end": 660,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 637,
											"end": 660,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 637,
											"end": 660,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 637,
											"end": 660,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 637,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 637,
											"end": 664,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 637,
											"end": 675,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 637,
											"end": 675,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 637,
											"end": 675,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 637,
											"end": 675,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 637,
											"end": 675,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 637,
											"end": 675,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 637,
											"end": 675,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 611,
											"end": 622,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 611,
											"end": 634,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 623,
											"end": 633,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 611,
											"end": 634,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 611,
											"end": 634,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 611,
											"end": 634,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 611,
											"end": 634,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 611,
											"end": 634,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 611,
											"end": 634,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 611,
											"end": 675,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 611,
											"end": 675,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 611,
											"end": 675,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 611,
											"end": 675,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 570,
											"end": 680,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1019,
											"end": 1023,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1038,
											"end": 1049,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 1059,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1031,
											"end": 1060,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1031,
											"end": 1060,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 953,
											"end": 1065,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2820,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2844,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2839,
											"end": 2840,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7,
											"end": 146,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 59,
											"end": 146,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 307,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 152,
											"end": 307,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 152,
											"end": 307,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 250,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 231,
											"end": 251,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 222,
											"end": 251,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 251,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 260,
											"end": 301,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 295,
											"end": 300,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 260,
											"end": 301,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 260,
											"end": 301,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 260,
											"end": 301,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 260,
											"end": 301,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 212,
											"end": 307,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 212,
											"end": 307,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 212,
											"end": 307,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 212,
											"end": 307,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 212,
											"end": 307,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 313,
											"end": 575,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 313,
											"end": 575,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 313,
											"end": 575,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 421,
											"end": 423,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 409,
											"end": 418,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 400,
											"end": 407,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 396,
											"end": 419,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 392,
											"end": 424,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 389,
											"end": 391,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 389,
											"end": 391,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 389,
											"end": 391,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 437,
											"end": 438,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 434,
											"end": 435,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 427,
											"end": 439,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 389,
											"end": 391,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 389,
											"end": 391,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 480,
											"end": 481,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 505,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 550,
											"end": 557,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 541,
											"end": 547,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 530,
											"end": 539,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 526,
											"end": 548,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 505,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 505,
											"end": 558,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 505,
											"end": 558,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 505,
											"end": 558,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 495,
											"end": 558,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 495,
											"end": 558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 451,
											"end": 568,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 379,
											"end": 575,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 379,
											"end": 575,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 379,
											"end": 575,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 379,
											"end": 575,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 379,
											"end": 575,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 581,
											"end": 859,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 581,
											"end": 859,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 581,
											"end": 859,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 697,
											"end": 699,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 685,
											"end": 694,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 676,
											"end": 683,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 672,
											"end": 695,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 668,
											"end": 700,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 665,
											"end": 667,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 665,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 665,
											"end": 667,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 713,
											"end": 714,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 710,
											"end": 711,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 703,
											"end": 715,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 665,
											"end": 667,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 665,
											"end": 667,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 756,
											"end": 757,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 781,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 834,
											"end": 841,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 825,
											"end": 831,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 814,
											"end": 823,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 810,
											"end": 832,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 781,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 781,
											"end": 842,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 781,
											"end": 842,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 781,
											"end": 842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 771,
											"end": 842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 771,
											"end": 842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 727,
											"end": 852,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 655,
											"end": 859,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 655,
											"end": 859,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 655,
											"end": 859,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 655,
											"end": 859,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 655,
											"end": 859,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 865,
											"end": 1007,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 865,
											"end": 1007,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 994,
											"end": 999,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 963,
											"end": 966,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 956,
											"end": 1001,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 946,
											"end": 1007,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 946,
											"end": 1007,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 946,
											"end": 1007,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1013,
											"end": 1334,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 1013,
											"end": 1334,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1013,
											"end": 1334,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1176,
											"end": 1243,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1240,
											"end": 1242,
											"name": "PUSH",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1235,
											"end": 1238,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1176,
											"end": 1243,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 1176,
											"end": 1243,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1176,
											"end": 1243,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1176,
											"end": 1243,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1169,
											"end": 1243,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1169,
											"end": 1243,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH",
											"source": 2,
											"value": "63616C6C6572206973206E6F7420746865206F776E6572000000000000000000"
										},
										{
											"begin": 1269,
											"end": 1270,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1264,
											"end": 1267,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1260,
											"end": 1271,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1253,
											"end": 1299,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1325,
											"end": 1327,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1320,
											"end": 1323,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1316,
											"end": 1328,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1309,
											"end": 1328,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1309,
											"end": 1328,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1159,
											"end": 1334,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1159,
											"end": 1334,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1159,
											"end": 1334,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1159,
											"end": 1334,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1340,
											"end": 1458,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1340,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1427,
											"end": 1451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 1445,
											"end": 1450,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1427,
											"end": 1451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1427,
											"end": 1451,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1427,
											"end": 1451,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 1427,
											"end": 1451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1422,
											"end": 1425,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1415,
											"end": 1452,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1464,
											"end": 1718,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1464,
											"end": 1718,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1464,
											"end": 1718,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 1613,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1600,
											"end": 1609,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1596,
											"end": 1614,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1588,
											"end": 1614,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1588,
											"end": 1614,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1624,
											"end": 1711,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 1708,
											"end": 1709,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1697,
											"end": 1706,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1693,
											"end": 1710,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1684,
											"end": 1690,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1624,
											"end": 1711,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 1624,
											"end": 1711,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1624,
											"end": 1711,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 1624,
											"end": 1711,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1578,
											"end": 1718,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1578,
											"end": 1718,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1578,
											"end": 1718,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1578,
											"end": 1718,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1578,
											"end": 1718,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1724,
											"end": 2143,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 1724,
											"end": 2143,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1724,
											"end": 2143,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1928,
											"end": 1930,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1917,
											"end": 1926,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1913,
											"end": 1931,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1905,
											"end": 1931,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1905,
											"end": 1931,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1977,
											"end": 1986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 1975,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1967,
											"end": 1987,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1963,
											"end": 1964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1952,
											"end": 1961,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1948,
											"end": 1965,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1941,
											"end": 1988,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2005,
											"end": 2136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2131,
											"end": 2135,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2005,
											"end": 2136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 2005,
											"end": 2136,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2005,
											"end": 2136,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2005,
											"end": 2136,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1997,
											"end": 2136,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1997,
											"end": 2136,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1895,
											"end": 2143,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1895,
											"end": 2143,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1895,
											"end": 2143,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1895,
											"end": 2143,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2149,
											"end": 2371,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 2149,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2149,
											"end": 2371,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2280,
											"end": 2282,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2278,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2265,
											"end": 2283,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2257,
											"end": 2283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2257,
											"end": 2283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2293,
											"end": 2364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2361,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2350,
											"end": 2359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2346,
											"end": 2363,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2337,
											"end": 2343,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2293,
											"end": 2364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 2293,
											"end": 2364,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2293,
											"end": 2364,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2293,
											"end": 2364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2247,
											"end": 2371,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2247,
											"end": 2371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2247,
											"end": 2371,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2247,
											"end": 2371,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2247,
											"end": 2371,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2377,
											"end": 2546,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2377,
											"end": 2546,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2377,
											"end": 2546,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2495,
											"end": 2501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2490,
											"end": 2493,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2483,
											"end": 2502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2530,
											"end": 2533,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2526,
											"end": 2540,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2511,
											"end": 2540,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2511,
											"end": 2540,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2546,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2546,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2546,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2552,
											"end": 2857,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 2552,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2857,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2611,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2629,
											"end": 2630,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2611,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 2611,
											"end": 2631,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2611,
											"end": 2631,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2611,
											"end": 2631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2606,
											"end": 2631,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2606,
											"end": 2631,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2645,
											"end": 2665,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2663,
											"end": 2664,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2645,
											"end": 2665,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 2645,
											"end": 2665,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2645,
											"end": 2665,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2645,
											"end": 2665,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2640,
											"end": 2665,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2640,
											"end": 2665,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2799,
											"end": 2800,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2731,
											"end": 2797,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2727,
											"end": 2801,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2724,
											"end": 2725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2802,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2718,
											"end": 2720,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2718,
											"end": 2720,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2718,
											"end": 2720,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2805,
											"end": 2823,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 2805,
											"end": 2823,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 2805,
											"end": 2823,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2805,
											"end": 2823,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 2805,
											"end": 2823,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2718,
											"end": 2720,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2718,
											"end": 2720,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2849,
											"end": 2850,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2846,
											"end": 2847,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2842,
											"end": 2851,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2835,
											"end": 2851,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2835,
											"end": 2851,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2596,
											"end": 2857,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2596,
											"end": 2857,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2596,
											"end": 2857,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2596,
											"end": 2857,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2596,
											"end": 2857,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2863,
											"end": 2959,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 2863,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2863,
											"end": 2959,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2929,
											"end": 2953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 2947,
											"end": 2952,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2929,
											"end": 2953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2929,
											"end": 2953,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2929,
											"end": 2953,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 2929,
											"end": 2953,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2918,
											"end": 2953,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2918,
											"end": 2953,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2959,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2959,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2959,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2959,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2965,
											"end": 3069,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2965,
											"end": 3069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2965,
											"end": 3069,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3039,
											"end": 3063,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 3057,
											"end": 3062,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3039,
											"end": 3063,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 3039,
											"end": 3063,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3039,
											"end": 3063,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 3039,
											"end": 3063,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3028,
											"end": 3063,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3028,
											"end": 3063,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3018,
											"end": 3069,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3018,
											"end": 3069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3018,
											"end": 3069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3018,
											"end": 3069,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3075,
											"end": 3201,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 3075,
											"end": 3201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3201,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3152,
											"end": 3194,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3145,
											"end": 3150,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 3195,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3130,
											"end": 3195,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3130,
											"end": 3195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3201,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3201,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3201,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3207,
											"end": 3284,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 3207,
											"end": 3284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3207,
											"end": 3284,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3273,
											"end": 3278,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3278,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3278,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3252,
											"end": 3284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3252,
											"end": 3284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3252,
											"end": 3284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3252,
											"end": 3284,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3290,
											"end": 3470,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3290,
											"end": 3470,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3338,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3335,
											"end": 3336,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3328,
											"end": 3416,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3435,
											"end": 3439,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 3432,
											"end": 3433,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3425,
											"end": 3440,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3459,
											"end": 3463,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3456,
											"end": 3457,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3449,
											"end": 3464,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3476,
											"end": 3598,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3476,
											"end": 3598,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3549,
											"end": 3573,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 3567,
											"end": 3572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3549,
											"end": 3573,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3549,
											"end": 3573,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3549,
											"end": 3573,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 3549,
											"end": 3573,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3542,
											"end": 3547,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3539,
											"end": 3574,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3529,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 3529,
											"end": 3531,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3588,
											"end": 3589,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3585,
											"end": 3586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3578,
											"end": 3590,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3529,
											"end": 3531,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 3529,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3519,
											"end": 3598,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3519,
											"end": 3598,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3604,
											"end": 3742,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3604,
											"end": 3742,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 3711,
											"end": 3716,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3678,
											"end": 3683,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3675,
											"end": 3718,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 3665,
											"end": 3667,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3732,
											"end": 3733,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3729,
											"end": 3730,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3722,
											"end": 3734,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3667,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 3665,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3655,
											"end": 3742,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3655,
											"end": 3742,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Fal1out()": "6fab5ddf",
							"allocate()": "abaa9916",
							"allocatorBalance(address)": "ffd40b56",
							"collectAllocations()": "8aa96f38",
							"owner()": "8da5cb5b",
							"sendAllocation(address)": "a2dea26f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Fal1out\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"allocatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"sendAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fallout.sol\":\"Fallout\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"contracts/Fallout.sol\":{\"keccak256\":\"0x0782db28ee0bf3ee06cf603d51c8a0764f521d57a91709cf1f02198e5cfa0c49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a61ef548bffc381c98c93ccfe88c29c0857e4b32cdb26603620442a9dff08806\",\"dweb:/ipfs/QmTx4eSd6FW6FMYZycR1vVkXZtWyE9JYUZxNZd4JaSBfoa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 321,
								"contract": "contracts/Fallout.sol:Fallout",
								"label": "allocations",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 323,
								"contract": "contracts/Fallout.sol:Fallout",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						]
					},
					"id": 312,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:0",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 311,
							"linearizedBaseContracts": [
								311
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 33,
										"nodeType": "Block",
										"src": "717:140:0",
										"statements": [
											{
												"id": 32,
												"nodeType": "UncheckedBlock",
												"src": "727:124:0",
												"statements": [
													{
														"assignments": [
															15
														],
														"declarations": [
															{
																"constant": false,
																"id": 15,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 32,
																"src": "751:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 14,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 19,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 16,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "763:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 17,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "767:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 20,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 15,
																"src": "786:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 21,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "790:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 27,
														"nodeType": "IfStatement",
														"src": "782:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 23,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 24,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 25,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 13,
															"id": 26,
															"nodeType": "Return",
															"src": "793:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 28,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 29,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "838:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 30,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 13,
														"id": 31,
														"nodeType": "Return",
														"src": "824:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:0",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 34,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "657:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "668:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "702:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "708:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:0"
									},
									"scope": 311,
									"src": "641:216:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "1078:113:0",
										"statements": [
											{
												"id": 60,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 46,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "1116:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 47,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 37,
																"src": "1120:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 53,
														"nodeType": "IfStatement",
														"src": "1112:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 50,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 51,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 45,
															"id": 52,
															"nodeType": "Return",
															"src": "1123:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 54,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 55,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 37,
																		"src": "1168:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 56,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 39,
																		"src": "1172:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 58,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 45,
														"id": 59,
														"nodeType": "Return",
														"src": "1154:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:0",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1018:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1029:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1063:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1069:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:0"
									},
									"scope": 311,
									"src": "1002:189:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 103,
										"nodeType": "Block",
										"src": "1415:417:0",
										"statements": [
											{
												"id": 102,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 76,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 74,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1683:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 81,
														"nodeType": "IfStatement",
														"src": "1679:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 77,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 79,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 80,
															"nodeType": "Return",
															"src": "1691:16:0"
														}
													},
													{
														"assignments": [
															83
														],
														"declarations": [
															{
																"constant": false,
																"id": 83,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 102,
																"src": "1721:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 82,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 87,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 84,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1733:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 85,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1737:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 88,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1756:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 89,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 65,
																	"src": "1760:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 91,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1765:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 97,
														"nodeType": "IfStatement",
														"src": "1752:33:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 93,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 95,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 96,
															"nodeType": "Return",
															"src": "1768:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 98,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 99,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1813:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 100,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 73,
														"id": 101,
														"nodeType": "Return",
														"src": "1799:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:0",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1355:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1366:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1400:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 69,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1406:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:0"
									},
									"scope": 311,
									"src": "1339:493:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 131,
										"nodeType": "Block",
										"src": "2057:114:0",
										"statements": [
											{
												"id": 130,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 116,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 109,
																"src": "2095:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 123,
														"nodeType": "IfStatement",
														"src": "2091:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 121,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 115,
															"id": 122,
															"nodeType": "Return",
															"src": "2103:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 125,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 107,
																		"src": "2148:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 126,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 109,
																		"src": "2152:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 128,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 115,
														"id": 129,
														"nodeType": "Return",
														"src": "2134:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:0",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1997:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2008:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2042:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2048:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:0"
									},
									"scope": 311,
									"src": "1981:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 159,
										"nodeType": "Block",
										"src": "2406:114:0",
										"statements": [
											{
												"id": 158,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 144,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 137,
																"src": "2444:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 151,
														"nodeType": "IfStatement",
														"src": "2440:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 149,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 143,
															"id": 150,
															"nodeType": "Return",
															"src": "2452:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 153,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 135,
																		"src": "2497:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 154,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 137,
																		"src": "2501:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 156,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 143,
														"id": 157,
														"nodeType": "Return",
														"src": "2483:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2346:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2357:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2391:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2397:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:0"
									},
									"scope": 311,
									"src": "2330:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 174,
										"nodeType": "Block",
										"src": "2822:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 170,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "2839:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 171,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2843:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 169,
												"id": 173,
												"nodeType": "Return",
												"src": "2832:12:0"
											}
										]
									},
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:0",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2768:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2779:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2813:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:0"
									},
									"scope": 311,
									"src": "2755:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "3189:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 185,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 178,
														"src": "3206:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 186,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "3210:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 184,
												"id": 188,
												"nodeType": "Return",
												"src": "3199:12:0"
											}
										]
									},
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3135:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3146:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:0"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3180:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:0"
									},
									"scope": 311,
									"src": "3122:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 204,
										"nodeType": "Block",
										"src": "3532:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 200,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3549:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 201,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "3553:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 199,
												"id": 203,
												"nodeType": "Return",
												"src": "3542:12:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:0",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3478:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3489:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:0"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3523:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:0"
									},
									"scope": 311,
									"src": "3465:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 219,
										"nodeType": "Block",
										"src": "3917:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 215,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "3934:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 216,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 210,
														"src": "3938:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 214,
												"id": 218,
												"nodeType": "Return",
												"src": "3927:12:0"
											}
										]
									},
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3863:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3874:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:0"
									},
									"returnParameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3908:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:0"
									},
									"scope": 311,
									"src": "3850:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4466:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 230,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "4483:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 231,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "4487:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 229,
												"id": 233,
												"nodeType": "Return",
												"src": "4476:12:0"
											}
										]
									},
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4412:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4423:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:0"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4457:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:0"
									},
									"scope": 311,
									"src": "4399:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "5084:106:0",
										"statements": [
											{
												"id": 258,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 248,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "5126:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 249,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 238,
																		"src": "5131:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 251,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "5134:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 247,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 253,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 254,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "5168:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 255,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "5172:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 246,
														"id": 257,
														"nodeType": "Return",
														"src": "5161:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4981:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5000:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5019:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 241,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5075:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:0"
									},
									"scope": 311,
									"src": "4959:231:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "5799:105:0",
										"statements": [
											{
												"id": 283,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 273,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 265,
																		"src": "5841:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 276,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "5848:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 272,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 278,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 279,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 263,
																"src": "5882:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 280,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 265,
																"src": "5886:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 271,
														"id": 282,
														"nodeType": "Return",
														"src": "5875:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5696:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5715:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5734:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:0"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5790:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:0"
									},
									"scope": 311,
									"src": "5674:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 309,
										"nodeType": "Block",
										"src": "6675:105:0",
										"statements": [
											{
												"id": 308,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 298,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "6717:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 301,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "6724:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 297,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 303,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 304,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "6758:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 305,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 290,
																"src": "6762:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 296,
														"id": 307,
														"nodeType": "Return",
														"src": "6751:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6572:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6591:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6610:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:0"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6666:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:0"
									},
									"scope": 311,
									"src": "6550:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 312,
							"src": "482:6300:0"
						}
					],
					"src": "107:6676:0"
				},
				"id": 0
			},
			"contracts/Fallout.sol": {
				"ast": {
					"absolutePath": "contracts/Fallout.sol",
					"exportedSymbols": {
						"Fallout": [
							426
						],
						"SafeMath": [
							311
						]
					},
					"id": 427,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 313,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "79:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 314,
							"nodeType": "ImportDirective",
							"scope": 427,
							"sourceUnit": 312,
							"src": "104:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 426,
							"linearizedBaseContracts": [
								426
							],
							"name": "Fallout",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 317,
									"libraryName": {
										"id": 315,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 311,
										"src": "193:8:1"
									},
									"nodeType": "UsingForDirective",
									"src": "187:27:1",
									"typeName": {
										"id": 316,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "206:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 321,
									"mutability": "mutable",
									"name": "allocations",
									"nodeType": "VariableDeclaration",
									"scope": 426,
									"src": "217:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 320,
										"keyType": {
											"id": 318,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "226:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "217:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 319,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "237:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 323,
									"mutability": "mutable",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"scope": 426,
									"src": "258:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 322,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "258:15:1",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 341,
										"nodeType": "Block",
										"src": "346:74:1",
										"statements": [
											{
												"expression": {
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 326,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 323,
														"src": "352:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 329,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "368:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 330,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "368:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 328,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "360:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 327,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "360:8:1",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 331,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "360:19:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "352:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 333,
												"nodeType": "ExpressionStatement",
												"src": "352:27:1"
											},
											{
												"expression": {
													"id": 339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 334,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 321,
															"src": "385:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 336,
														"indexExpression": {
															"id": 335,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 323,
															"src": "397:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "385:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 337,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "406:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 338,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "406:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "385:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 340,
												"nodeType": "ExpressionStatement",
												"src": "385:30:1"
											}
										]
									},
									"functionSelector": "6fab5ddf",
									"id": 342,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Fal1out",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "328:2:1"
									},
									"returnParameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:0:1"
									},
									"scope": 426,
									"src": "312:108:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "443:123:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 348,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 345,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "476:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 346,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "476:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 347,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 323,
																"src": "490:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "476:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "510:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															},
															"value": "caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															}
														],
														"id": 344,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "454:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "454:92:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "454:92:1"
											},
											{
												"id": 352,
												"nodeType": "PlaceholderStatement",
												"src": "557:1:1"
											}
										]
									},
									"id": 354,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "443:0:1"
									},
									"src": "424:142:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "605:75:1",
										"statements": [
											{
												"expression": {
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 357,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 321,
															"src": "611:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 360,
														"indexExpression": {
															"expression": {
																"id": 358,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "623:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 359,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "623:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "611:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 366,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "665:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "665:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 361,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "637:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 364,
																"indexExpression": {
																	"expression": {
																		"id": 362,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "649:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "649:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "637:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 175,
															"src": "637:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 368,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "637:38:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "611:64:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 370,
												"nodeType": "ExpressionStatement",
												"src": "611:64:1"
											}
										]
									},
									"functionSelector": "abaa9916",
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "587:2:1"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "605:0:1"
									},
									"scope": 426,
									"src": "570:110:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 393,
										"nodeType": "Block",
										"src": "742:94:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 378,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "756:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 380,
																"indexExpression": {
																	"id": 379,
																	"name": "allocator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "768:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "756:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 381,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "781:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "756:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 377,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "748:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "748:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 384,
												"nodeType": "ExpressionStatement",
												"src": "748:35:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 388,
																"name": "allocations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 321,
																"src": "808:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 390,
															"indexExpression": {
																"id": 389,
																"name": "allocator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "820:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "808:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 385,
															"name": "allocator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "789:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "789:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "789:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 392,
												"nodeType": "ExpressionStatement",
												"src": "789:42:1"
											}
										]
									},
									"functionSelector": "a2dea26f",
									"id": 394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendAllocation",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "708:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "708:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "707:27:1"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "742:0:1"
									},
									"scope": 426,
									"src": "684:152:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 412,
										"nodeType": "Block",
										"src": "887:62:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 407,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "930:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Fallout_$426",
																			"typeString": "contract Fallout"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Fallout_$426",
																			"typeString": "contract Fallout"
																		}
																	],
																	"id": 406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "922:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 405,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "922:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "922:13:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "922:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 401,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "901:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "901:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 400,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "893:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 399,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "893:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "893:19:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "893:28:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "893:51:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 411,
												"nodeType": "ExpressionStatement",
												"src": "893:51:1"
											}
										]
									},
									"functionSelector": "8aa96f38",
									"id": 413,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 397,
											"modifierName": {
												"id": 396,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 354,
												"src": "877:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "877:9:1"
										}
									],
									"name": "collectAllocations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "867:2:1"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "887:0:1"
									},
									"scope": 426,
									"src": "840:109:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 424,
										"nodeType": "Block",
										"src": "1025:40:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 420,
														"name": "allocations",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "1038:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 422,
													"indexExpression": {
														"id": 421,
														"name": "allocator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 415,
														"src": "1050:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1038:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 419,
												"id": 423,
												"nodeType": "Return",
												"src": "1031:29:1"
											}
										]
									},
									"functionSelector": "ffd40b56",
									"id": 425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocatorBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "979:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "979:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:19:1"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1019:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1019:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1018:6:1"
									},
									"scope": 426,
									"src": "953:112:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 427,
							"src": "163:904:1"
						}
					],
					"src": "79:988:1"
				},
				"id": 1
			}
		}
	}
}